package ${package}.service;

import com.kb.entity.${className}Entity;
import com.kb.exception.ErrorException;
import com.kb.repository.${className}Repository;
import com.kb.utils.DateUtils;
import com.kb.utils.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.*;

/**
 * ${comments}Service
 *
 * @Author: ${author}
 * @Date: ${datetime}
 */
@Service
public class ${className}Service {

    @Autowired
    private ${className}Repository ${classname}Repository;

    /**
     * 新增
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    @Transactional(rollbackFor = ErrorException.class)
    public void add(${className}Entity ${classname}Entity)throws ErrorException {
        ${classname}Entity.setCreateTime(new Date());
        ${classname}Repository.save(${classname}Entity);
    }

    /**
     * 删除
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    @Transactional(rollbackFor = ErrorException.class)
    public void deleteById(String id)throws ErrorException {
        ${classname}Repository.deleteById(id);
    }

    /**
     * 修改
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    @Transactional(rollbackFor = ErrorException.class)
    public void update(${className}Entity ${classname}Entity)throws ErrorException{
        ${className}Entity entity = ${classname}Repository.findById(${classname}Entity.getId());
        entity.setUpdateTime(new Date());
        //因jpa的saveAndFlush会赋值null值，所以调用该方法赋值非空值
        EntityUtils.copyPropertiesIgnoreNull(${classname}Entity, entity);
        ${classname}Repository.saveAndFlush(entity);
    }

    /**
     * 根据主键查询
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    public ${className}Entity findById(String id)throws ErrorException {
        return ${classname}Repository.findById(id);
    }

    /**
     * 条件查询
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    public Map<String,Object> selectByCondition(Integer page, Integer pageSize, String --, String --, String --)throws ErrorException{
        Specification<${className}Entity> querySpecification = new Specification<${className}Entity>() {
            private static final long serialVersionUID = 1L;

            @Override
            public Predicate toPredicate(Root<${className}Entity> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {
                List<Predicate> predicates = new ArrayList<>();
                //
                if (!StringUtils.isEmpty(--)) {
                    predicates.add(criteriaBuilder.equal(root.get("--"), --));
                }
                //
                if (!StringUtils.isEmpty(--)) {
                    predicates.add(criteriaBuilder.like(root.get("--").as(String.class), "%" + -- + "%"));
                }
                //--时间
                if (!StringUtils.isEmpty(--)) {
                    //大于等于
                    predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("--"), DateUtils.YmdByObject(--)));
                    //小于等于
                    predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("--"), DateUtils.YmdByObject(--)));
                }
                return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
            }
        };
        Sort sort = new Sort(Sort.Direction.DESC, "id");
        Pageable pageable = new PageRequest(page - 1, pageSize, sort);

        Page<${className}Entity> entityPage = ${classname}Repository.findAll(querySpecification, pageable);
        Map<String, Object> map = new HashMap<>();
        List<${className}Entity> list = new ArrayList<>();
        for (${className}Entity entity : entityPage) {
            list.add(entity);
        }
        map.put("list", list);
        map.put("total", entityPage.getTotalElements());
        return map;
    }

}