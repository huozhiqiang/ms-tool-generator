package ${package}.biz;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.StringUtil;
import com.yss.ms.api.business.plan.PlanPlaninfoInfo;
import com.yss.ms.api.business.plan.PlanUnifiedplanInfo;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ${package}.entity.${className};
import ${package}.mapper.${className}Mapper;
import ${package}.vo.${className}VO;
import com.yss.ms.common.biz.BusinessBiz;
import tk.mybatis.mapper.entity.Example;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ${comments}Biz
 *
 * @Author: ${author}
 * @Date: ${datetime}
 */
@Service
public class ${className}Biz extends BusinessBiz<${className}Mapper,${className}> {

    @Autowired
    private ${className}Mapper ${classname}Mapper;

    /**
     * 条件查询
     *
     * @Author: ${author} ${datetime}
     */
    public Map<String,Object> selectByQuery(Map<String, Object> params) {
        Map<String, Object> map = new HashMap<>(100);
        map.put("page", params.get("page"));
        map.put("limit", params.get("limit"));
        Example example = new Example(${className}.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andEqualTo("deleted",0);
        params.remove("page");
        params.remove("limit");
        for (Map.Entry<String, Object> entry : params.entrySet()) {
            if(entry.getValue() != null && StringUtil.isNotEmpty(entry.getValue().toString())) {
                criteria.andLike(entry.getKey(), "%" + entry.getValue().toString() + "%");
            }
        }
        int page = Integer.parseInt(map.get("page").toString());
        int limit = Integer.parseInt(map.get("limit").toString());
        Page<Object> result = PageHelper.startPage(page,limit);
        List<${className}> list = bizMapper.selectByExample(example);
        if(list == null || list.size() == 0) {
            return null;
        }
        map.clear();
        map = list${className}VO(list);
        map.put("total", result.getTotal());
        return map;
    }

    /**
     * 提出的公共方法
     * 把实体集合转换成VO集合
     * 
     * @Author: ${author} ${datetime}
     */
    private Map<String,Object> list${className}VO(List<${className}> list){
        Map<String, Object> map = new HashMap<>();
        //计划表主键
        List<Integer> planFidList = new ArrayList<>();
        //统一计划表主键
        List<Integer> unPlanFidList = new ArrayList<>();
        List<${className}VO> voList = new ArrayList<>();
        for (${className} ${classname} : list){
            planFidList.add(${classname}.getPlanFid());
            unPlanFidList.add(${classname}.getUnifiedplanFid());

            ${className}VO vo = new ${className}VO();
            BeanUtils.copyProperties(${classname}, vo);
            voList.add(vo);
        }
        map.put("voList", voList);
        map.put("planFidList",planFidList);
        map.put("unPlanFidList",unPlanFidList);
        return map;
    }

    /**
     * vo中插入计划代码和名称
     *
     * @Author: ${author} ${datetime}
     */
    public List<${className}VO> planListInfo(List<PlanPlaninfoInfo> planList, List<${className}VO> voList){
        for (int i = 0 ;i < voList.size(); i++ ) {
            voList.get(i).setPlanlicId(planList.get(i).getFplanlicId());
            voList.get(i).setPlanName(planList.get(i).getFplanName());
        }
        return voList;
    }

    /**
     * vo中插入统一计划代码和名称
     *
     * @Author: ${author} ${datetime}
     */
    public List<${className}VO> listUnPlanInfo(List<PlanUnifiedplanInfo> unPlanList, List<${className}VO> voList){
        for (int i = 0 ;i < voList.size(); i++ ) {
            voList.get(i).setUnifiedPlanlicId(unPlanList.get(i).getFunifiedPlanlicId());
            voList.get(i).setUnifiedPlanName(unPlanList.get(i).getFunifiedPlanName());
        }
        return voList;
    }


}