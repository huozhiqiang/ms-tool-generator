package ${package}.rest;

import ${package}.service.${className}Service;
import ${package}.entity.${className};
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;

import java.util.Map;

/**
 * ${comments}
 *
 * @Author: ${author}
 * @Date: ${datetime}
 */
@RestController
@RequestMapping("${secondModuleName}")
@Api(description = "${comments}接口")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 新增
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    @ApiOperation(value = "新增")
    @PostMapping(value = "", produces = MediaType.APPLICATION_JSON_VALUE )
    public ObjectResponse<${className}Entity> add(@RequestBody ${className}Entity ${classname}Entity) throws ErrorException{
        ${classname}Service.add(${classname}Entity);
        return new ObjectResponse<>();
    }

    /**
     * 删除
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    @ApiOperation(value = "删除")
    @DeleteMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ObjectResponse<${className}Entity> deleteById(@PathVariable String id) throws ErrorException {
        ${classname}Service.deleteById(id);
        return new ObjectResponse<>();
    }

    /**
     * 修改
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    @ApiOperation(value = "修改")
    @PutMapping(value = "")
    public ObjectResponse<${className}Entity> update(@RequestBody ${className}Entity ${classname}Entity) throws ErrorException{
        ${classname}Service.update(${classname}Entity);
        return new ObjectResponse<>();
    }

    /**
     * 查询(根据主键)
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    @ApiOperation(value = "查询(根据主键)")
    @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ObjectResponse<${className}Entity> findById(@PathVariable String id) throws ErrorException {
        return new ObjectResponse<>(${classname}Service.findById(id));
    }


    /**
     * 条件查询
     *
     * @Author: ${author}
     * @Date: ${datetime}
     */
    @ApiOperation(value = "条件查询")
    @GetMapping(path = "", produces = MediaType.APPLICATION_JSON_VALUE)
    public ListResponse<${className}Entity> selectByCondition(@RequestParam Integer page, @RequestParam Integer pageSize,
                                                              @RequestParam(required = false) String --, @RequestParam(required = false) String --, @RequestParam(required = false) String --) throws ErrorException{
        Map<String, Object> map = ${classname}Service.selectByCondition(page, pageSize, --, --, --);
        if(map == null){
            return new ListResponse<>(0, null);
        }
        return new ListResponse<>(Long.parseLong(map.get("total").toString()), (List<${className}Entity>)map.get("list"));
    }


}